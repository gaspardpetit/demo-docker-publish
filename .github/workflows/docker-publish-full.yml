name: Docker Publish - full

on:
  schedule:
    # Run automatically at 02:28 UTC on the 15th of every month
    - cron: '28 2 15 * *'
  push:
    # Trigger on pushes to main branch
    branches: [ "main" ]
    # Also trigger on version tags like v1.2.3
    tags: [ 'v*.*.*' ]
  pull_request:
    # Run checks for PRs targeting main branch
    branches: [ "main" ]

env:
  # Default registry (ghcr.io = GitHub Container Registry)
  REGISTRY: ghcr.io
  # Final image name: <account>/<repo>-matrix
  IMAGE_NAME: ${{ github.repository }}-matrix

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60 # fail job if build takes longer than 1 hour

    permissions:
      contents: read        # allows reading repo content
      packages: write       # required to push to GitHub Container Registry
      id-token: write       # required for Cosign keyless signing (OIDC)

    strategy:
      # Define build matrix for different image variants
      matrix:
        variant:
          - name: main
            suffix: ""
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64  # multi-arch
          - name: variant
            suffix: "-variant"
            dockerfile: Dockerfile              # could be a different file
            platforms: linux/amd64

    steps:
      # 1. Fetch source code
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2. Install Cosign (only for push, not PRs)
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      # 3. Enable Docker Buildx (needed for multi-arch builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Authenticate to registry (only for pushes)
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Compute version metadata (tags, semver, sha, build date)
      - name: Compute version metadata
        id: metadata
        shell: bash
        run: |
          set -euo pipefail
          SHA=$(git rev-parse --short HEAD)
          DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME}"
            DESCRIBE="${GITHUB_REF_NAME}"
            VERSION_PYTHON="${GITHUB_REF_NAME#v}" # strip v prefix
          else
            DESCRIBE="$(git describe --tags --always --dirty)"
            VERSION="${DESCRIBE}"
            VERSION_PYTHON="$(git describe --tags --always --dirty \
              | sed -E 's/^v//; s/-([0-9]+)-g[0-9a-f]+(-dirty)?$/.post\1\2/; s/-dirty$/.dev0/')"
          fi

          # Drop local version suffix if present
          VERSION_PYTHON="${VERSION_PYTHON%%+*}"

          # Export values to other steps
          echo "version=${VERSION}"           >> "$GITHUB_OUTPUT"
          echo "version_python=${VERSION_PYTHON}" >> "$GITHUB_OUTPUT"
          echo "describe=${DESCRIBE}"         >> "$GITHUB_OUTPUT"
          echo "sha=${SHA}"                   >> "$GITHUB_OUTPUT"
          echo "date=${DATE}"                 >> "$GITHUB_OUTPUT"

          # If tag is clean semver, also export major/minor/patch
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"; MINOR="${BASH_REMATCH[2]}"; PATCH="${BASH_REMATCH[3]}"
            echo "major=${MAJOR}" >> "$GITHUB_OUTPUT"
            echo "minor=${MINOR}" >> "$GITHUB_OUTPUT"
            echo "patch=${PATCH}" >> "$GITHUB_OUTPUT"
            echo "is_clean_release=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_clean_release=false" >> "$GITHUB_OUTPUT"
          fi

          echo "Computed VERSION_PYTHON=${VERSION_PYTHON}"

      # 6. Generate Docker metadata (tags/labels based on git state)
      - name: Extract Docker metadata ( ${{ matrix.variant.name }} )
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Always add SHA-based tag
            type=raw,value=${{ matrix.variant.tag_prefix }}sha-${{ steps.metadata.outputs.sha }}
            # Tag 'main' builds
            type=raw,value=${{ matrix.variant.tag_prefix }}main,enable=${{ github.ref == 'refs/heads/main' }}
            # Descriptive tag (git describe)
            type=raw,value=${{ matrix.variant.tag_prefix }}desc-${{ steps.metadata.outputs.describe }},enable=${{ github.ref == 'refs/heads/main' }}
            # Full semver tag if release
            type=raw,value=${{ matrix.variant.tag_prefix }}${{ github.ref_name }},enable=${{ steps.metadata.outputs.is_clean_release == 'true' }}
            # Major.minor semver tag
            type=raw,value=${{ matrix.variant.tag_prefix }}v${{ steps.metadata.outputs.major }}.${{ steps.metadata.outputs.minor }},enable=${{ steps.metadata.outputs.is_clean_release == 'true' }}
            # Major-only tag
            type=raw,value=${{ matrix.variant.tag_prefix }}v${{ steps.metadata.outputs.major }},enable=${{ steps.metadata.outputs.is_clean_release == 'true' }}
            # Latest tag only on clean releases
            type=raw,value=${{ matrix.variant.tag_prefix }}latest,enable=${{ steps.metadata.outputs.is_clean_release == 'true' }}

      # 7. Build and push Docker image
      - name: Build and push Docker image ( ${{ matrix.variant.name }} )
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.variant.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          platforms: ${{ matrix.variant.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYVERSION=${{ steps.metadata.outputs.version_python }}
            VERSION=${{ steps.metadata.outputs.version }}
            GIT_SHA=${{ steps.metadata.outputs.sha }}
            BUILD_DATE=${{ steps.metadata.outputs.date }}

      # 8. Sign image using Cosign keyless OIDC
      - name: Sign the published Docker image ( ${{ matrix.variant.name }} )
        if: ${{ github.event_name != 'pull_request' }}
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker-metadata.outputs.tags }}
          COSIGN_EXPERIMENTAL: "true" # explicit OIDC signing
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      # 9. Verify signatures after signing
      - name: Verify signature ( ${{ matrix.variant.name }} )
        run: cosign verify ${{ steps.docker-metadata.outputs.tags }} \
              --certificate-identity-regexp "https://github.com/${{ github.repository }}/.*" \
              --certificate-oidc-issuer "https://token.actions.githubusercontent.com"
